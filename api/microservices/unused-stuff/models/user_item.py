# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class UserItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, num_games: int=None, total_play_time: float=None, two_weeks_playtime: float=None, review_play_time: float=None, last_played: str=None):  # noqa: E501
        """UserItem - a model defined in Swagger

        :param id: The id of this UserItem.  # noqa: E501
        :type id: int
        :param num_games: The num_games of this UserItem.  # noqa: E501
        :type num_games: int
        :param total_play_time: The total_play_time of this UserItem.  # noqa: E501
        :type total_play_time: float
        :param two_weeks_playtime: The two_weeks_playtime of this UserItem.  # noqa: E501
        :type two_weeks_playtime: float
        :param review_play_time: The review_play_time of this UserItem.  # noqa: E501
        :type review_play_time: float
        :param last_played: The last_played of this UserItem.  # noqa: E501
        :type last_played: str
        """
        self.swagger_types = {
            'id': int,
            'num_games': int,
            'total_play_time': float,
            'two_weeks_playtime': float,
            'review_play_time': float,
            'last_played': str
        }

        self.attribute_map = {
            'id': 'id',
            'num_games': 'numGames',
            'total_play_time': 'totalPlayTime',
            'two_weeks_playtime': 'twoWeeksPlaytime',
            'review_play_time': 'reviewPlayTime',
            'last_played': 'lastPlayed'
        }

        self._id = id
        self._num_games = num_games
        self._total_play_time = total_play_time
        self._two_weeks_playtime = two_weeks_playtime
        self._review_play_time = review_play_time
        self._last_played = last_played

    @classmethod
    def from_dict(cls, dikt) -> 'UserItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserItem of this UserItem.  # noqa: E501
        :rtype: UserItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this UserItem.


        :return: The id of this UserItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UserItem.


        :param id: The id of this UserItem.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def num_games(self) -> int:
        """Gets the num_games of this UserItem.


        :return: The num_games of this UserItem.
        :rtype: int
        """
        return self._num_games

    @num_games.setter
    def num_games(self, num_games: int):
        """Sets the num_games of this UserItem.


        :param num_games: The num_games of this UserItem.
        :type num_games: int
        """
        if num_games is None:
            raise ValueError("Invalid value for `num_games`, must not be `None`")  # noqa: E501

        self._num_games = num_games

    @property
    def total_play_time(self) -> float:
        """Gets the total_play_time of this UserItem.


        :return: The total_play_time of this UserItem.
        :rtype: float
        """
        return self._total_play_time

    @total_play_time.setter
    def total_play_time(self, total_play_time: float):
        """Sets the total_play_time of this UserItem.


        :param total_play_time: The total_play_time of this UserItem.
        :type total_play_time: float
        """
        if total_play_time is None:
            raise ValueError("Invalid value for `total_play_time`, must not be `None`")  # noqa: E501

        self._total_play_time = total_play_time

    @property
    def two_weeks_playtime(self) -> float:
        """Gets the two_weeks_playtime of this UserItem.


        :return: The two_weeks_playtime of this UserItem.
        :rtype: float
        """
        return self._two_weeks_playtime

    @two_weeks_playtime.setter
    def two_weeks_playtime(self, two_weeks_playtime: float):
        """Sets the two_weeks_playtime of this UserItem.


        :param two_weeks_playtime: The two_weeks_playtime of this UserItem.
        :type two_weeks_playtime: float
        """
        if two_weeks_playtime is None:
            raise ValueError("Invalid value for `two_weeks_playtime`, must not be `None`")  # noqa: E501

        self._two_weeks_playtime = two_weeks_playtime

    @property
    def review_play_time(self) -> float:
        """Gets the review_play_time of this UserItem.


        :return: The review_play_time of this UserItem.
        :rtype: float
        """
        return self._review_play_time

    @review_play_time.setter
    def review_play_time(self, review_play_time: float):
        """Sets the review_play_time of this UserItem.


        :param review_play_time: The review_play_time of this UserItem.
        :type review_play_time: float
        """
        if review_play_time is None:
            raise ValueError("Invalid value for `review_play_time`, must not be `None`")  # noqa: E501

        self._review_play_time = review_play_time

    @property
    def last_played(self) -> str:
        """Gets the last_played of this UserItem.


        :return: The last_played of this UserItem.
        :rtype: str
        """
        return self._last_played

    @last_played.setter
    def last_played(self, last_played: str):
        """Sets the last_played of this UserItem.


        :param last_played: The last_played of this UserItem.
        :type last_played: str
        """
        if last_played is None:
            raise ValueError("Invalid value for `last_played`, must not be `None`")  # noqa: E501

        self._last_played = last_played
