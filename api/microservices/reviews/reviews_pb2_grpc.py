# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reviews_pb2 as reviews__pb2


class ReviewsStub(object):
    """######################
    ##### SERVICES ###### 
    ######################

    Services provided by the reviews microservice
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetReview = channel.unary_unary(
                '/Reviews/GetReview',
                request_serializer=reviews__pb2.ReviewByIdRequest.SerializeToString,
                response_deserializer=reviews__pb2.ReviewData.FromString,
                )
        self.GetGameReviews = channel.unary_unary(
                '/Reviews/GetGameReviews',
                request_serializer=reviews__pb2.ReviewsByGameRequest.SerializeToString,
                response_deserializer=reviews__pb2.ReviewDataResponse.FromString,
                )


class ReviewsServicer(object):
    """######################
    ##### SERVICES ###### 
    ######################

    Services provided by the reviews microservice
    """

    def GetReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGameReviews(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReviewsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetReview': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReview,
                    request_deserializer=reviews__pb2.ReviewByIdRequest.FromString,
                    response_serializer=reviews__pb2.ReviewData.SerializeToString,
            ),
            'GetGameReviews': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGameReviews,
                    request_deserializer=reviews__pb2.ReviewsByGameRequest.FromString,
                    response_serializer=reviews__pb2.ReviewDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reviews', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reviews(object):
    """######################
    ##### SERVICES ###### 
    ######################

    Services provided by the reviews microservice
    """

    @staticmethod
    def GetReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reviews/GetReview',
            reviews__pb2.ReviewByIdRequest.SerializeToString,
            reviews__pb2.ReviewData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGameReviews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reviews/GetGameReviews',
            reviews__pb2.ReviewsByGameRequest.SerializeToString,
            reviews__pb2.ReviewDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
