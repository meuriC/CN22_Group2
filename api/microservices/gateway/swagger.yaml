swagger: '2.0'
info:
  description: API desenvolvida para Computação em Nuvem 2022
  version: 1.0.0
  title: Steam Reviews API
  contact:
    email: cngroup2@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /ui/api
tags:
  - name: Steam Service
    description: General logic of the system
  - name: Users Service
    description: Manage the users that review games on steam
schemes:
  - http
  - https
paths:
  /steam/recommendedGames:
    get:
      tags:
        - Steam Service
      summary: Get recommended games
      description: Get the top 10 games that were more recommended by the users
      operationId: api-steam.getRecommendedGames
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/GamesItem'
        '400':
          description: invalid input, object invalid
        '409':
          description: an existing item already exists
  /steam/activeusers:
    get:
      tags:
        - Steam Service
      summary: Get most active users
      description: Get the top 10 most active users
      operationId: api-steam.getActiveUsers
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/UserItem'
        '400':
          description: invalid input, object invalid
  /users:
    post:
      tags:
        - Users Service
      summary: Creates or updates new User
      description: Creates a new user
      operationId: api-users.createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: UserItem
          description: User to create
          required: false
          schema:
            $ref: '#/definitions/UserItem'
      responses:
        '201':
          description: user created
          schema:
            $ref: '#/definitions/UserItem'
        '202':
          description: user updated
        '400':
          description: invalid input, object invalid
  /users/{user_id}:
    get:
      tags:
        - Users Service
      summary: Get information about a specific user
      description: This call returns information about a specified user_id
      operationId: api-users.getUser
      parameters:
        - name: user_id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: information about a user
          schema:
            type: array
            items:
              $ref: '#/definitions/UserItem'
        '400':
          description: User id not found
    delete:
      tags:
        - Users Service
      summary: Delete account
      description: Deletes the account of the user
      operationId: api-users.deleteUserAccount
      parameters:
        - name: user_id
          in: path
          required: true
          type: string
      responses:
        '204':
          description: The account was deleted with success
        '401':
          description: Unauthorized
        '404':
          description: Username not found
  /users/{user_id}/games/{app_id}/reviews:
      post:
        tags:
        - Users Service
        summary: Creates a new Review
        description: Creates a new review
        operationId: api-users.createReview
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - name: app_id
          in: path
          required: true
          type: string
        - name: user_id
          in: path
          required: true
          type: string
        - in: body
          name: ReviewsItem
          description: Review to create
          required: true
          schema:
            $ref: '#/definitions/ReviewsItem'
        responses:
          "201":
            description: item created
          "400":
            description: invalid input, object invalid
          "409":
            description: an existing item already exists
  /reviews/{id}:
    get:
      tags:
      - Reviews Service
      summary: Get review by id
      description: With this call you can get a specific review made in steam
      operationId: api-reviews.getReviewById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        "200":
          description: search results for the specific review
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any reviews
        "404":
          description: id not found
    put:
      tags:
      - Reviews Service
      summary: Updates an existing review
      description: Updates a review existing in the dataset
      operationId: api-reviews.updateReview
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - in: body
        name: ReviewsItem
        description: Review to update
        required: true
        schema:
          $ref: '#/definitions/ReviewsItem'
      responses:
        "201":
          description: item updated
        "400":
          description: invalid id, object invalid
        "404":
          description: id not found
    delete:
      tags:
      - Reviews Service
      summary: Delete a review by it´s id
      description: Deletes a review from the dataset
      operationId: api-reviews.deleteReview
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        "204":
          description: Successful deletion
        "404":
          description: Error id not found
        "401":
          description: Unauthorized
  /reviews/helpful/{id}:
    put:
      tags:
      - Reviews Service
      summary: Set Review as helpful
      description: Sets a specific review as helpful
      operationId: api-reviews.setReviewHelpful
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        "201":
          description: item updated
        "400":
          description: invalid id, object invalid
        "404":
          description: id not found
  /reviews/games/{id}/{language}:
    get:
      tags:
      - Reviews Service
      summary: Get game reviews by language
      description: With this call you can get all reviews in a game in a specific language
      operationId: api-reviews.getGameReviewsByLanguage
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - name: language
        in: path
        required: true
        type: string
      responses:
        "200":
          description: search results for the specific review in the given language
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any reviews
        "404":
          description: id or language not found
  /reviews/filter/users/{user_id}:
    get:
      tags:
      - Reviews Service
      summary: Get all reviews from a specific user
      description: With this call you can get all the reviews that a specific user wrote
      operationId: api-reviews.userReviews
      parameters:
      - name: user_id
        in: path
        required: true
        type: string
      responses:
        "200":
          description: All reviews written by the user
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: Couldn't find any reviews written by the user
        "404":
          description: user id not found
  /reviews/filter/helpful:
    get:
      tags:
      - Reviews Service
      summary: Get all the helpful reviews
      description: With this call you can get all reviews which were marked as helpful at least once (helpful >= 1)
      operationId: api-reviews.getHelpfulReviews
      parameters: []
      responses:
        "200":
          description: search results for all the reviews which are helpful
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any helpful reviews
  /game/{name}:
    get:
      tags:
      - Games Service
      summary: Search for a game by name
      description: The user gets the game he searched
      operationId: api-games.getGameByName
      produces:
      - application/json
      parameters:
      - name: name
        in: path
        required: true
        type: string
      responses:
        "200":
          description: search for a game
          schema:
            type: array
            items:
              $ref: '#/definitions/GamesItem'
        "400":
          description: couldn't find any games 
    delete:
      tags:
      - Games Service
      summary: Delete a game by it´s name
      description: Deletes a game from the dataset
      operationId: api-games.deleteGameByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
      responses:
        "204":
          description: Successful deletion
        "404":
          description: Error id not found
        "401":
          description: Unauthorized
  /game:
    post:
      tags:
      - Games Service
      summary: Creates a new game on the list
      description: Creates a new game
      operationId: api-games.createGame
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: GamesItem
        description: Game to create
        required: false
        schema:
          $ref: '#/definitions/GamesItem'
      responses:
        "201":
          description: game created
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing game already exists
  /games/{id}/reviews:
    get:
      tags:
      - Games Service
      summary: Get all reviews of a game
      description: With this call you can get all reviews of a game
      operationId: api-games.getReviewByGame
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        "200":
          description: search results for all the reviews with in a game
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any helpful reviews
definitions:
  UserItem:
    type: object
    required:
      - username
      - language
    properties:
      username:
        type: string
        example: random name
      language:
        type: string
        example: random language
  ReviewsItem:
    type: object
    required:
      - recommended
      - review
    properties:
      review:
        type: string
        example: It's 2021. This is the first time I have played this. All of the good.
      recommended:
        type: string
        example: "True"
  GamesItem:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Fifa 22
  UserAuthItem:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        example: userguest1
      password:
        type: string
        example: password
  TokenItem:
    type: object
    required:
      - token
    properties:
      token:
        type: string
        example: ibsufbaw32432-isufaiefawfg-234234nkawf
