# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class GamesItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, game: str=None, number_of_reviews: int=None, most_common_language: str=None, recommended_percentage: str=None):  # noqa: E501
        """GamesItem - a model defined in Swagger

        :param game: The game of this GamesItem.  # noqa: E501
        :type game: str
        :param number_of_reviews: The number_of_reviews of this GamesItem.  # noqa: E501
        :type number_of_reviews: int
        :param most_common_language: The most_common_language of this GamesItem.  # noqa: E501
        :type most_common_language: str
        :param recommended_percentage: The recommended_percentage of this GamesItem.  # noqa: E501
        :type recommended_percentage: str
        """
        self.swagger_types = {
            'game': str,
            'number_of_reviews': int,
            'most_common_language': str,
            'recommended_percentage': str
        }

        self.attribute_map = {
            'game': 'game',
            'number_of_reviews': 'numberOfReviews',
            'most_common_language': 'mostCommonLanguage',
            'recommended_percentage': 'recommendedPercentage'
        }

        self._game = game
        self._number_of_reviews = number_of_reviews
        self._most_common_language = most_common_language
        self._recommended_percentage = recommended_percentage

    @classmethod
    def from_dict(cls, dikt) -> 'GamesItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GamesItem of this GamesItem.  # noqa: E501
        :rtype: GamesItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game(self) -> str:
        """Gets the game of this GamesItem.


        :return: The game of this GamesItem.
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game: str):
        """Sets the game of this GamesItem.


        :param game: The game of this GamesItem.
        :type game: str
        """
        if game is None:
            raise ValueError("Invalid value for `game`, must not be `None`")  # noqa: E501

        self._game = game

    @property
    def number_of_reviews(self) -> int:
        """Gets the number_of_reviews of this GamesItem.


        :return: The number_of_reviews of this GamesItem.
        :rtype: int
        """
        return self._number_of_reviews

    @number_of_reviews.setter
    def number_of_reviews(self, number_of_reviews: int):
        """Sets the number_of_reviews of this GamesItem.


        :param number_of_reviews: The number_of_reviews of this GamesItem.
        :type number_of_reviews: int
        """
        if number_of_reviews is None:
            raise ValueError("Invalid value for `number_of_reviews`, must not be `None`")  # noqa: E501

        self._number_of_reviews = number_of_reviews

    @property
    def most_common_language(self) -> str:
        """Gets the most_common_language of this GamesItem.


        :return: The most_common_language of this GamesItem.
        :rtype: str
        """
        return self._most_common_language

    @most_common_language.setter
    def most_common_language(self, most_common_language: str):
        """Sets the most_common_language of this GamesItem.


        :param most_common_language: The most_common_language of this GamesItem.
        :type most_common_language: str
        """
        if most_common_language is None:
            raise ValueError("Invalid value for `most_common_language`, must not be `None`")  # noqa: E501

        self._most_common_language = most_common_language

    @property
    def recommended_percentage(self) -> str:
        """Gets the recommended_percentage of this GamesItem.


        :return: The recommended_percentage of this GamesItem.
        :rtype: str
        """
        return self._recommended_percentage

    @recommended_percentage.setter
    def recommended_percentage(self, recommended_percentage: str):
        """Sets the recommended_percentage of this GamesItem.


        :param recommended_percentage: The recommended_percentage of this GamesItem.
        :type recommended_percentage: str
        """
        if recommended_percentage is None:
            raise ValueError("Invalid value for `recommended_percentage`, must not be `None`")  # noqa: E501

        self._recommended_percentage = recommended_percentage
