# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class ReviewsItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, game: str=None, language: str=None, review: str=None, recommended: bool=None, helpful: bool=None):  # noqa: E501
        """ReviewsItem - a model defined in Swagger

        :param game: The game of this ReviewsItem.  # noqa: E501
        :type game: str
        :param language: The language of this ReviewsItem.  # noqa: E501
        :type language: str
        :param review: The review of this ReviewsItem.  # noqa: E501
        :type review: str
        :param recommended: The recommended of this ReviewsItem.  # noqa: E501
        :type recommended: bool
        :param helpful: The helpful of this ReviewsItem.  # noqa: E501
        :type helpful: bool
        """
        self.swagger_types = {
            'game': str,
            'language': str,
            'review': str,
            'recommended': bool,
            'helpful': bool
        }

        self.attribute_map = {
            'game': 'game',
            'language': 'language',
            'review': 'review',
            'recommended': 'recommended',
            'helpful': 'helpful'
        }

        self._game = game
        self._language = language
        self._review = review
        self._recommended = recommended
        self._helpful = helpful

    @classmethod
    def from_dict(cls, dikt) -> 'ReviewsItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReviewsItem of this ReviewsItem.  # noqa: E501
        :rtype: ReviewsItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game(self) -> str:
        """Gets the game of this ReviewsItem.


        :return: The game of this ReviewsItem.
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game: str):
        """Sets the game of this ReviewsItem.


        :param game: The game of this ReviewsItem.
        :type game: str
        """
        if game is None:
            raise ValueError("Invalid value for `game`, must not be `None`")  # noqa: E501

        self._game = game

    @property
    def language(self) -> str:
        """Gets the language of this ReviewsItem.


        :return: The language of this ReviewsItem.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this ReviewsItem.


        :param language: The language of this ReviewsItem.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def review(self) -> str:
        """Gets the review of this ReviewsItem.


        :return: The review of this ReviewsItem.
        :rtype: str
        """
        return self._review

    @review.setter
    def review(self, review: str):
        """Sets the review of this ReviewsItem.


        :param review: The review of this ReviewsItem.
        :type review: str
        """
        if review is None:
            raise ValueError("Invalid value for `review`, must not be `None`")  # noqa: E501

        self._review = review

    @property
    def recommended(self) -> bool:
        """Gets the recommended of this ReviewsItem.


        :return: The recommended of this ReviewsItem.
        :rtype: bool
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended: bool):
        """Sets the recommended of this ReviewsItem.


        :param recommended: The recommended of this ReviewsItem.
        :type recommended: bool
        """
        if recommended is None:
            raise ValueError("Invalid value for `recommended`, must not be `None`")  # noqa: E501

        self._recommended = recommended

    @property
    def helpful(self) -> bool:
        """Gets the helpful of this ReviewsItem.


        :return: The helpful of this ReviewsItem.
        :rtype: bool
        """
        return self._helpful

    @helpful.setter
    def helpful(self, helpful: bool):
        """Sets the helpful of this ReviewsItem.


        :param helpful: The helpful of this ReviewsItem.
        :type helpful: bool
        """
        if helpful is None:
            raise ValueError("Invalid value for `helpful`, must not be `None`")  # noqa: E501

        self._helpful = helpful
