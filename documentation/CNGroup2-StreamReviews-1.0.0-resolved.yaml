---
swagger: "2.0"
info:
  description: API desenvolvida para Computação em Nuvem 2022
  version: 1.0.0
  title: Steam Reviews API
  contact:
    email: miguelescsilva@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /ComputacaoNuvem2022/StreamReviews/1.0.0
tags:
- name: admin
  description: Secured Admin-only calls
- name: any
  description: Users without authentication
- name: user
  description: Users with authentication
schemes:
- https
paths:
  /reviews:
    get:
      tags:
      - user
      summary: Get all reviews without filters
      description: With this call you can get all the reviews made in steam
      operationId: getAllReviews
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: search results for all the reviews
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any reviews
    post:
      tags:
      - user
      summary: Creates a new Review
      description: Creates a new review
      operationId: createReview
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: ReviewsItem
        description: Review to create
        required: false
        schema:
          $ref: '#/definitions/ReviewsItem'
      responses:
        "201":
          description: item created
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
  /reviews/{id}:
    get:
      tags:
      - user
      summary: Get review by id
      description: With this call you can get a specific review made in steam
      operationId: getReviewById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "200":
          description: search results for the specific review
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any reviews
        "404":
          description: id not found
    put:
      tags:
      - user
      summary: Updates an existing review
      description: Updates a review existing in the dataset
      operationId: updateReview
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      - in: body
        name: ReviewsItem
        description: Review to update
        required: false
        schema:
          $ref: '#/definitions/ReviewsItem'
      responses:
        "201":
          description: item updated
        "400":
          description: invalid id, object invalid
        "404":
          description: id not found
    delete:
      tags:
      - user
      summary: Delete a review by it´s id
      description: Deletes a review from the dataset
      operationId: deleteReview
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "204":
          description: Successful deletion
        "404":
          description: Error id not found
        "401":
          description: Unauthorized
  /reviews/helpful/{id}:
    put:
      tags:
      - user
      summary: Set Review as helpful
      description: Sets a specific review as helpful
      operationId: setReviewHelpful
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      - in: body
        name: ReviewsItem
        description: Review to set as Helpful
        required: false
        schema:
          $ref: '#/definitions/ReviewsItem'
      responses:
        "201":
          description: item updated
        "400":
          description: invalid id, object invalid
        "404":
          description: id not found
  /reviews/filter/{language}/{id}:
    get:
      tags:
      - user
      summary: Get review by id, in the defined language
      description: With this call you can get a specific review made in steam, in a specific language
      operationId: getReviewByIdAndLanguage
      produces:
      - application/json
      parameters:
      - name: language
        in: path
        required: true
        type: string
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "200":
          description: search results for the specific review in the given language
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any reviews
        "404":
          description: id or language not found
  /reviews/filter/recommended:
    get:
      tags:
      - user
      summary: Get all the recommended reviews
      description: With this call you can get all reviews which recommend games
      operationId: getReviewRecommended
      parameters: []
      responses:
        "200":
          description: search results for all the reviews which recommend a game
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any recommended reviews
  /reviews/filter/users/{id}:
    get:
      tags:
      - user
      summary: Get all reviews from a specific user
      description: With this call you can get all the reviews that a specific user wrote
      operationId: userReviews
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "200":
          description: All reviews written by the user
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: Couldn't find any reviews written by the user
        "404":
          description: user id not found
  /reviews/filter/helpful:
    get:
      tags:
      - user
      summary: Get all the helpful reviews
      description: With this call you can get all reviews which were marked as helpful
      operationId: getReviewHelpful
      parameters: []
      responses:
        "200":
          description: search results for all the reviews which are helpful
          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewsItem'
        "400":
          description: couldn´t find any helpful reviews
  /users:
    post:
      tags:
      - any
      summary: Creates or updates new User
      description: Creates a new user
      operationId: createUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: UserItem
        description: User to create
        required: false
        schema:
          $ref: '#/definitions/UserItem'
      responses:
        "201":
          description: user created
        "202":
          description: user updated
        "400":
          description: invalid input, object invalid
  /users/{id}:
    get:
      tags:
      - user
      summary: Get information about a specific user
      description: This call returns information about a specified user id
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "200":
          description: information about a user
          schema:
            type: array
            items:
              $ref: '#/definitions/UserItem'
        "400":
          description: User id not found
  /users/login/{username}:
    get:
      tags:
      - any
      summary: User logs in
      description: User logs in
      operationId: userLogin
      parameters:
      - name: username
        in: path
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: invalid username
        "404":
          description: username not found
  /users/logout:
    get:
      tags:
      - user
      summary: Log out
      description: The user logs out of his account
      operationId: userLogOut
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: User logged out successfully
        "400":
          description: Couldn't log out of the account
  /user/{username}:
    delete:
      tags:
      - user
      summary: Delete account
      description: Deletes the account of the user
      operationId: deleteUserAccount
      parameters:
      - name: username
        in: path
        required: true
        type: string
      responses:
        "204":
          description: The account was deleted with success
        "404":
          description: Username not found
        "401":
          description: Unauthorized
  /game/recommended/{id}:
    put:
      tags:
      - any
      summary: Recommend a game
      description: Recommend the game based on the review status
      operationId: setRecommendTrue
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      - in: body
        name: ReviewsItem
        description: Set recommended to true or false
        required: false
        schema:
          $ref: '#/definitions/ReviewsItem'
      responses:
        "201":
          description: game recommended
        "400":
          description: invalid id, object invalid
        "404":
          description: id not found
  /game/purchases:
    get:
      tags:
      - user
      summary: Most reviewed games
      description: The user receives information about the most reviewed games
      operationId: getMostReviewedGames
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: search results for the mostreviewed games
          schema:
            type: array
            items:
              $ref: '#/definitions/MostReviewedGamesItem'
        "400":
          description: couldn't find any games with reviews
  /game/{id}:
    get:
      tags:
      - any
      summary: Search for a game
      description: The user gets the game he searched
      operationId: getSearchedGame
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "200":
          description: search for a game
          schema:
            type: array
            items:
              $ref: '#/definitions/MostReviewedGamesItem'
        "400":
          description: couldn't find any games with reviews
  /admin/game:
    post:
      tags:
      - admin
      summary: Creates a new game on the list
      description: Creates a new game
      operationId: createGame
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: UserItem
        description: Admin to create
        required: false
        schema:
          $ref: '#/definitions/ReviewsItem'
      responses:
        "201":
          description: game created
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing game already exists
  /admin/game/{id}:
    delete:
      tags:
      - admin
      summary: Delete a game by it´s id
      description: Deletes a game from the dataset
      operationId: deleteGame
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "204":
          description: Successful deletion
        "404":
          description: Error id not found
        "401":
          description: Unauthorized
  /admin/user/{username}:
    delete:
      tags:
      - admin
      summary: Admin Delete account
      description: Admin Deletes the account of the user
      operationId: adminDeleteUserAccount
      parameters:
      - name: username
        in: path
        required: true
        type: string
      responses:
        "204":
          description: The account was deleted with success
        "404":
          description: Username not found
        "401":
          description: Unauthorized
  /admin/reviews/{id}:
    delete:
      tags:
      - admin
      summary: Admin deletes a review by it´s id
      description: Admin deletes a review from the dataset
      operationId: adminDeleteReview
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        "204":
          description: Successful deletion
        "404":
          description: Error id not found
        "401":
          description: Unauthorized
definitions:
  UserItem:
    type: object
    required:
    - id
    - lastPlayed
    - numGames
    - reviewPlayTime
    - totalPlayTime
    - twoWeeksPlaytime
    properties:
      id:
        type: integer
        example: 76561198949504115
      numGames:
        type: integer
        example: 70
      totalPlayTime:
        type: number
        example: 300.7
      twoWeeksPlaytime:
        type: number
        example: 28.7
      reviewPlayTime:
        type: number
        example: 30.0
      lastPlayed:
        type: string
        example: 2/07/2020
  ReviewsItem:
    type: object
    required:
    - game
    - helpful
    - language
    - recommended
    - review
    properties:
      game:
        type: string
        example: FIFA 22
      language:
        type: string
        example: English
      review:
        type: string
        example: It's 2021. This is the first time I have played this. All of the good.
      recommended:
        type: boolean
        example: true
      helpful:
        type: boolean
        example: true
  MostReviewedGamesItem:
    type: object
    required:
    - game
    - mostCommonLanguage
    - numberOfReviews
    - recommendedPercentage
    properties:
      game:
        type: string
        example: Fifa 22
      numberOfReviews:
        type: integer
        example: 1
      mostCommonLanguage:
        type: string
        example: english
      recommendedPercentage:
        type: string
        example: 100%
